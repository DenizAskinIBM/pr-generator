# tasks.yaml
# Defines tasks for the Hierarchical PR Grouping Crew

# ----- Analysis Phase Tasks (Executed by AnalysisAgent) -----

initial_analysis:
  description: >
    Analyze all staged and unstaged changes in the git repository located at '{repo_path}'.
    Use the 'repo_analyzer_tool' to get file paths, statuses, basic statistics, and assign a unique 'file_id'.
    Limit analysis using '{max_files}' if provided.
    You MUST NOT use the Tool Calling/Function Calling format for the Final Answer step for THIS task. Just return the raw JSON string from the observation.
  expected_output: >
    A JSON string serialization of the RepositoryAnalysis object.
  agent: analysis_agent # Specify the agent responsible

calculate_global_metrics:
  description: >
    Calculate objective repository metrics based on the RepositoryAnalysis JSON from 'initial_analysis'.
    Use the 'repo_metrics_tool'.
  expected_output: >
    A JSON string serialization of the RepositoryMetrics object.
  agent: analysis_agent

analyze_global_patterns:
  description: >
    Analyze file changes from 'initial_analysis' to identify naming patterns and similarities globally.
    Use the 'pattern_analyzer_tool'.
  expected_output: >
    A JSON string serialization of the PatternAnalysisResult object.
  agent: analysis_agent

select_grouping_strategy:
  description: >
    Based on global analysis results (RepositoryAnalysis, RepositoryMetrics, PatternAnalysisResult JSONs),
    select the most appropriate high-level grouping strategy. Use the 'grouping_strategy_selector_tool'.
  expected_output: >
    A JSON string serialization of the GroupingStrategyDecision object.
  agent: analysis_agent

split_into_batches:
  description: >
    Split the changed files identified in the 'initial_analysis' context into manageable batches.
    1. Extract the RepositoryAnalysis JSON string from the 'initial_analysis' context.
    2. Use the 'batch_splitter_tool'. Pass the extracted string as the 'repository_analysis_json' argument.
       Use '{max_batch_size}' as the 'target_batch_size' argument.
    3. Your final answer MUST be the raw JSON string returned directly by the 'batch_splitter_tool' in the Observation step.
       Do not return the input you used for the tool. Do not add extra formatting or explanations.
  expected_output: >
    A JSON string serialization of the BatchSplitterOutput object, containing 'batches' (a list of lists of file paths), 'strategy_used', and 'notes'.
    Example format: {{"batches": [["path/to/file1.py", "path/to/file2.py"], ["path/to/file3.js"]], "strategy_used": "Adaptive complexity...", "notes": "..."}}
  agent: analysis_agent

# ----- Manager Orchestration Task -----

coordinate_batch_processing:
  description: >
    **CRITICAL ORCHESTRATION TASK:** As the PR Manager Agent, you must coordinate the processing of all file batches.
    
    IMPORTANT - JSON PROCESSING: When handling JSON data between tasks, always:
    1. Remove any Markdown code block formatting (```) from JSON strings
    2. Ensure JSON strings end with the proper closing bracket or brace - not with trailing backticks
    3. When constructing context for worker tasks, validate that the JSON is properly formatted
    
    Input Context: You will receive the BatchSplitterOutput JSON (from 'split_into_batches') containing the list of batches (each with file_ids)
    and the GroupingStrategyDecision JSON (from 'select_grouping_strategy').

    Your Goal: Process EACH batch in parallel by:
    1. Clean and format the JSON context to ensure it can be parsed properly
    2. Construct the WorkerBatchContext JSON input required by the 'process_single_batch' task for each batch.
    3. Delegate the 'process_single_batch' task to the 'batch_processor_agent' for ALL batches simultaneously.
    
    IMPORTANT: When using the delegation tool for parallel processing, provide these parameters:
    - task: "process_single_batch"
    - context: The WorkerBatchContext JSON string for this batch (properly cleaned and validated)
    - coworker: "PR Batch Grouping Specialist"
    - async: True
    
    4. Wait for all batch processing results to complete.
    5. Collect and combine all the results.
    6. Your final output for this task MUST be a JSON list containing ALL the PRGroupingStrategy JSON strings collected from processing each batch.
       
       Example format: [{{"strategy_type": "mixed", "groups": [...], "explanation": "Batch 1 explanation...", ...}}, {{"strategy_type": "directory_based", "groups": [...], ...}}]
  expected_output: >
    A JSON list of objects/dictionaries. Each object in the list is the PRGroupingStrategy
    returned by the 'batch_processor_agent' for one processed batch.
    Each PRGroupingStrategy object must include: strategy_type, groups, explanation, estimated_review_complexity, and ungrouped_files.
  agent: pr_manager_agent
# ----- Task Delegated by Manager (Executed by BatchProcessorAgent) -----

process_single_batch:
  description: >
    Process the assigned batch of files. Input is a WorkerBatchContext JSON containing file_ids and the global strategy.
    IMPORTANT: Before using any JSON content in tool arguments, ensure it is properly cleaned
    of any Markdown formatting like triple backticks (```) or code block syntax.
    
    1. Clean all JSON strings to remove any trailing backticks that might cause parsing errors.
    2. Use 'file_grouper_tool' to generate initial groups for the files in the batch based on the provided strategy.
    3. Use 'group_validator_tool' (in batch mode) to validate the generated groups.
    4. Use 'group_refiner_tool' (in batch mode) to refine the groups based on validation results.
    
    Ensure the output is the refined PRGroupingStrategy for *only* the files processed in this batch.
  expected_output: >
    A JSON string serialization of the refined PRGroupingStrategy object specific to the processed batch.
  agent: batch_processor_agent


# ----- Merging and Finalization Tasks (Now Executed by MergerRefinerAgent) -----

merge_batch_results:
  description: >
    **CRITICAL MERGING TASK:** Your goal is to merge the results from all processed batches into a single PRGroupingStrategy.
    You MUST use the context provided by the framework, which contains the outputs of previous tasks.
    Specifically:
    1. Access the output of the 'coordinate_batch_processing' task. This output is a LIST of PRGroupingStrategy objects/dictionaries.
    2. Access the output of the 'initial_analysis' task. This output is a JSON string representing the complete, original RepositoryAnalysis object.
    3. Extract the list of objects/dictionaries and the RepositoryAnalysis JSON string from the context. DO NOT summarize, modify, or fabricate them.
    4. Use the 'Group Merging Tool'. Provide the extracted LIST of objects as the 'batch_grouping_results' argument and the extracted RepositoryAnalysis JSON string as the 'original_repository_analysis_json' argument.
  expected_output: >
    A JSON string serialization of the single, merged PRGroupingStrategy object. This object must be structurally valid.
  agent: merger_refiner_agent

final_validation:
  description: >
    Perform a final validation on the merged PR groups result provided in the context from the 'merge_batch_results' task.
    Use the 'group_validator_tool'. Set the 'is_final_validation' argument to 'true'.
    Extract the PRGroupingStrategy JSON string from the 'merge_batch_results' context and pass it verbatim as the 'pr_grouping_strategy_json' argument.
  expected_output: >
    A JSON string serialization of the final PRValidationResult object.
  agent: merger_refiner_agent

final_refinement:
  description: >
    **CRITICAL FINAL REFINEMENT TASK:** Perform the final refinement based on validation results and ensure all original files are included.
    You MUST use the context provided by the framework. Specifically:
    1. Access the output of the 'merge_batch_results' task (the merged PRGroupingStrategy JSON string).
    2. Access the output of the 'final_validation' task (the PRValidationResult JSON string).
    3. Access the output of the 'initial_analysis' task (the full, original RepositoryAnalysis JSON string).
    4. Extract these *exact* strings from the context. DO NOT summarize, modify, or fabricate them.
    5. Use the 'Group Refiner Tool'. Provide the extracted strings as the 'pr_grouping_strategy_json', 'pr_validation_result_json', and 'original_repository_analysis_json' arguments, respectively. Ensure 'original_repository_analysis_json' is provided for the final completeness check.
  expected_output: >
    A JSON string serialization of the FINAL, polished PRGroupingStrategy object ready for presentation. This object must be structurally valid.
  agent: merger_refiner_agent