# Tasks Configuration for PR Recommendation Crew
# Note: Agent assignment and tools are handled in crew.py when using @CrewBase decorators.
# This file primarily provides descriptions and expected outputs for CrewBase to use.

# Task 1: Analyze Repository
analyze_repository_changes:
  description: >
    Analyze the git repository located at '{repo_path}' to identify all outstanding
    file changes (staged and unstaged). Use the 'repo_analyzer' tool.
    Process up to {max_files} files if specified.
  expected_output: >
    A comprehensive RepositoryAnalysis object containing a list of FileChange objects,
    directory summaries, and total change counts.

# Task 2: Calculate Metrics
calculate_repository_metrics:
  description: >
    Using the RepositoryAnalysis from the previous step (analyze_repository_changes),
    calculate objective metrics about the changes using the 'repo_metrics' tool.
    Focus on directory structure, file types, and change sizes.
  expected_output: >
    A RepositoryMetrics object containing various calculated metrics.

# Task 3: Analyze Patterns
analyze_change_patterns:
  description: >
    Using the RepositoryAnalysis from the first step (analyze_repository_changes),
    analyze file names for common patterns, similarities, and relationships
    using the 'pattern_analyzer' tool.
  expected_output: >
    A PatternAnalysisResult object detailing identified patterns.

# Optional Task 3b: Analyze Directory Structure
# analyze_directory_structure:
#   description: >
#     Using the RepositoryAnalysis from the first step (analyze_repository_changes),
#     perform an in-depth analysis of the directory structure, hierarchy, and complexity
#     using the 'directory_analyzer' tool.
#   expected_output: >
#     A DirectoryAnalysisResult object with detailed structure analysis.

# Task 4: Select Strategy
select_grouping_strategy:
  description: >
    Evaluate the RepositoryAnalysis (from analyze_repository_changes) and calculated
    RepositoryMetrics (from calculate_repository_metrics) to decide the most suitable
    high-level grouping strategy (e.g., directory_based, feature_based) using the
    'grouping_strategy_selector' tool. Provide rationale and confidence rankings.
  expected_output: >
    A GroupingStrategyDecision object containing the selected primary strategy type,
    recommendations, influencing metrics, and rationale.

# Task 5: Generate Groups
generate_pr_groups:
  description: >
    Apply the selected grouping strategy type (from the 'strategy_type' field in the
    GroupingStrategyDecision of the previous step) to the file changes identified in
    RepositoryAnalysis (from analyze_repository_changes). Use RepositoryMetrics (from
    calculate_repository_metrics) and PatternAnalysisResult (from analyze_change_patterns)
    as context. Use the 'file_grouper' tool to create specific PR groups with titles,
    rationales, and suggested metadata.
  expected_output: >
    A PRGroupingStrategy object populated with a list of PRGroup objects, detailing the proposed pull requests.

# Task 6: Validate Groups
validate_pr_groups:
  description: >
    Validate the initial PR groups generated in the previous step (generate_pr_groups)
    using the original RepositoryAnalysis (from analyze_repository_changes) as context.
    Use the 'group_validator' tool to check for best practices like completeness,
    balance, coherence, clarity, and related file pairings.
  expected_output: >
    A PRValidationResult object indicating validity and listing any identified issues.

# Task 7: Refine Groups
refine_pr_groups:
  description: >
    Review the validation results (from validate_pr_groups) and the initial PR groups
    (from generate_pr_groups). If validation issues were found, use the 'group_refiner'
    tool to refine the groups by addressing issues like imbalance, duplication, missing files,
    or separated concerns. Ensure all original files are accounted for.
  expected_output: >
    A final, refined PRGroupingStrategy object containing the polished list of PRGroup objects.